basePath: /api
definitions:
  apperror.AppError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  dto.CreateRoleRequest:
    properties:
      description:
        maxLength: 255
        type: string
      name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        example: new.user@example.com
        type: string
      password:
        example: strongpassword123
        minLength: 8
        type: string
      role_id:
        example: b1c2d3e4-f5g6-7890-1234-567890abcdef
        type: string
      username:
        example: newuser
        minLength: 3
        type: string
    required:
    - email
    - password
    - role_id
    - username
    type: object
  dto.LoginRequest:
    properties:
      password:
        example: password
        type: string
      username:
        example: admin
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      message:
        example: Login successful
        type: string
      permissions:
        items:
          type: string
        type: array
      user:
        allOf:
        - $ref: '#/definitions/dto.UserResponse'
        description: Menggunakan UserResponse DTO
    type: object
  dto.PagedUserResponse:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.RefreshTokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  dto.RoleResponse:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  dto.UpdateRolePermissionsRequest:
    properties:
      permission_names:
        description: A list of permission names to assign to the role.
        items:
          type: string
        type: array
    required:
    - permission_names
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        example: updated.user@example.com
        type: string
      role_id:
        example: c1d2e3f4-g5h6-7890-1234-567890abcdef
        type: string
      username:
        example: updateduser
        minLength: 3
        type: string
    type: object
  dto.UserResponse:
    properties:
      avatar_url:
        example: https://example.com/avatar.png
        type: string
      email:
        example: john.doe@example.com
        type: string
      id:
        example: a1b2c3d4-e5f6-7890-1234-567890abcdef
        type: string
      role:
        example: user
        type: string
      username:
        example: johndoe
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the API documentation for the Beresin App backend.
  title: Beresin App API
  version: "1.0"
paths:
  /admin/roles:
    post:
      consumes:
      - application/json
      description: Creates a new role. Requires 'roles:create' permission.
      parameters:
      - description: New Role Details
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            $ref: '#/definitions/dto.RoleResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/apperror.AppError'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/apperror.AppError'
        "409":
          description: Role with that name already exists
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - Admin
      - Roles
  /admin/roles/{id}/permissions:
    put:
      consumes:
      - application/json
      description: Updates the list of permissions associated with a specific role.
        This action requires 'roles:assign' permission.
      parameters:
      - description: Role ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: List of permission names
        in: body
        name: permissions
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRolePermissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Role permissions updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid role ID format or validation failed
          schema:
            $ref: '#/definitions/apperror.AppError'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Update permissions for a role
      tags:
      - Admin
      - Roles
  /admin/users:
    get:
      description: Retrieves a paginated list of all users. Requires 'users:read'
        permission.
      parameters:
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page for pagination
        in: query
        name: limit
        type: integer
      - description: Search term for username or email
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: A paginated list of users
          schema:
            $ref: '#/definitions/dto.PagedUserResponse'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - Admin
      - Users
    post:
      consumes:
      - application/json
      description: Creates a new user with the provided details. Requires 'users:create'
        permission.
      parameters:
      - description: New User Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/apperror.AppError'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/apperror.AppError'
        "409":
          description: Username or email already exists
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Admin
      - Users
  /admin/users/{id}:
    delete:
      description: Deletes a user by their ID. Requires 'users:delete' permission.
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Admin
      - Users
    get:
      description: Retrieves the details of a single user by their ID. Requires 'users:read'
        permission.
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Get a single user by ID
      tags:
      - Admin
      - Users
    put:
      consumes:
      - application/json
      description: Updates a user's details. Requires 'users:update' permission.
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: User Details to Update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request payload or user ID
          schema:
            $ref: '#/definitions/apperror.AppError'
        "403":
          description: Insufficient permissions
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperror.AppError'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - Admin
      - Users
  /auth/google/callback:
    get:
      description: Handles the callback from Google after successful authentication.
        This endpoint is not intended to be called directly by users.
      responses: {}
      summary: Google Callback
      tags:
      - Auth
  /auth/google/login:
    get:
      description: Redirects the user to Google's authentication page.
      responses: {}
      summary: Google Login
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns an access token. The refresh token
        is set in an HttpOnly cookie.
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/apperror.AppError'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: User Login
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidates the refresh token and clears the session cookie.
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Failed to read refresh token
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Logout user
      tags:
      - Auth
  /auth/refresh:
    post:
      description: Generates a new access token using a valid refresh token from the
        cookie.
      produces:
      - application/json
      responses:
        "200":
          description: Token refreshed successfully
          schema:
            $ref: '#/definitions/dto.RefreshTokenResponse'
        "401":
          description: Unauthorized or invalid refresh token
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Refresh Access Token
      tags:
      - Auth
  /health/private:
    get:
      description: Endpoint ini memerlukan otentikasi.
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "ok", "message": "authenticated"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: '{"error": "unauthorized"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Private Health Check
      tags:
      - Health
  /health/public:
    get:
      description: Endpoint ini tidak memerlukan otentikasi.
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "ok"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Public Health Check
      tags:
      - Health
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
